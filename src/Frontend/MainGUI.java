/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Frontend;

import javax.swing.JFrame;
import Middleware.Cocktail;
import java.awt.event.ActionEvent;
import java.util.Arrays;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JList;
import javax.swing.text.Position;

/**
 *
 * @author Jennifer Lange und Joerg Swienty
 */
public class MainGUI extends javax.swing.JFrame {

    // Attribute
    private Cocktail[] cocktailsList;

    /**
     * Creates new form MainGUI
     */
    public MainGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchField = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        comboCreate = new javax.swing.JComboBox<>();
        comboCategory = new javax.swing.JComboBox<>();
        listPane = new javax.swing.JScrollPane();
        listContainer = new javax.swing.JList<>();
        btnAC = new javax.swing.JToggleButton();
        btnDF = new javax.swing.JToggleButton();
        btnGJ = new javax.swing.JToggleButton();
        btnKO = new javax.swing.JToggleButton();
        btnPS = new javax.swing.JToggleButton();
        btnTZ = new javax.swing.JToggleButton();
        btnAll = new javax.swing.JToggleButton();
        btnClose = new javax.swing.JButton();
        chkNoAlk = new javax.swing.JCheckBox();
        chkfruity = new javax.swing.JCheckBox();
        chkHard = new javax.swing.JCheckBox();
        chkCream = new javax.swing.JCheckBox();
        btnApply = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        jMenuBar = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(700, 420));
        setPreferredSize(new java.awt.Dimension(700, 400));
        setResizable(false);
        setSize(new java.awt.Dimension(700, 420));

        searchField.setText("hier tippen");

        btnSearch.setText("Suchen");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        comboCreate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Erstellen...", "Cocktail", "Bestandteil" }));
        comboCreate.setToolTipText("");
        comboCreate.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        comboCreate.setInheritsPopupMenu(true);
        comboCreate.setName("Select"); // NOI18N
        comboCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCreateActionPerformed(evt);
            }
        });

        comboCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cocktail", "Getraenk" }));
        comboCategory.setToolTipText("");
        comboCategory.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        comboCategory.setInheritsPopupMenu(true);
        comboCategory.setName("Select"); // NOI18N
        comboCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCategoryActionPerformed(evt);
            }
        });

        listContainer.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        listContainer.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        listContainer.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listPane.setViewportView(listContainer);

        btnAC.setText("A - C");
        btnAC.setPreferredSize(new java.awt.Dimension(60, 25));
        btnAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnACActionPerformed(evt);
            }
        });

        btnDF.setText("D - F");
        btnDF.setPreferredSize(new java.awt.Dimension(60, 25));
        btnDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDFActionPerformed(evt);
            }
        });

        btnGJ.setText("G - J");
        btnGJ.setPreferredSize(new java.awt.Dimension(60, 25));
        btnGJ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGJActionPerformed(evt);
            }
        });

        btnKO.setText("K - O");
        btnKO.setPreferredSize(new java.awt.Dimension(60, 25));
        btnKO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKOActionPerformed(evt);
            }
        });

        btnPS.setText("P - S");
        btnPS.setPreferredSize(new java.awt.Dimension(60, 25));
        btnPS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPSActionPerformed(evt);
            }
        });

        btnTZ.setText("T - Z");
        btnTZ.setPreferredSize(new java.awt.Dimension(60, 25));
        btnTZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTZActionPerformed(evt);
            }
        });

        btnAll.setText("*");
        btnAll.setPreferredSize(new java.awt.Dimension(60, 25));
        btnAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllActionPerformed(evt);
            }
        });

        btnClose.setText("Beenden");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        chkNoAlk.setText("alkoholfrei");

        chkfruity.setText("fruchtig");

        chkHard.setText("hart");

        chkCream.setText("sahnig");

        btnApply.setText("Anwenden");
        btnApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyActionPerformed(evt);
            }
        });

        btnReset.setText("Zur√ºcksetzen");

        jMenu3.setText("File");
        jMenuBar.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar.add(jMenu4);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(listPane, javax.swing.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(comboCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnClose, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnApply, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(chkfruity)
                                        .addComponent(chkNoAlk)
                                        .addComponent(chkHard)
                                        .addComponent(chkCream))
                                    .addComponent(btnReset, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addGap(32, 32, 32))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAC, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(btnDF, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(btnGJ, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(btnKO, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(btnPS, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(btnTZ, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAll, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnApply, btnClose, btnReset});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboCreate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGJ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnKO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTZ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chkNoAlk)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkfruity)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkHard)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkCream)
                        .addGap(8, 8, 8)
                        .addComponent(btnApply)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnReset)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnClose))
                    .addComponent(listPane, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCategoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboCategoryActionPerformed

    private void btnACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnACActionPerformed
        // TODO add your handling code here:
        filterSearchResultALF(evt);
    }//GEN-LAST:event_btnACActionPerformed

    private void btnPSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPSActionPerformed
        // TODO add your handling code here:
        filterSearchResultALF(evt);
    }//GEN-LAST:event_btnPSActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:
        close();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDFActionPerformed
        // TODO add your handling code here:
        filterSearchResultALF(evt);
    }//GEN-LAST:event_btnDFActionPerformed

    private void btnGJActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGJActionPerformed
        // TODO add your handling code here:
        filterSearchResultALF(evt);
    }//GEN-LAST:event_btnGJActionPerformed

    private void btnKOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKOActionPerformed
        // TODO add your handling code here:
        filterSearchResultALF(evt);
    }//GEN-LAST:event_btnKOActionPerformed

    private void btnTZActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTZActionPerformed
        // TODO add your handling code here:
        filterSearchResultALF(evt);
    }//GEN-LAST:event_btnTZActionPerformed

    private void btnAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllActionPerformed
        // TODO add your handling code here:
        listSearchResult();
        btnAC.setSelected(false);
        btnDF.setSelected(false);
        btnGJ.setSelected(false);
        btnKO.setSelected(false);
        btnPS.setSelected(false);
        btnTZ.setSelected(false);
    }//GEN-LAST:event_btnAllActionPerformed

    private void comboCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCreateActionPerformed
        // TODO add your handling code here:
        if (String.valueOf(comboCreate.getSelectedItem()).equals("Bestandteil")) {
            createBestandteil();
        }
        if (String.valueOf(comboCreate.getSelectedItem()).equals("Cocktail")) {
            createCocktail();
        }
    }//GEN-LAST:event_comboCreateActionPerformed

    private void btnApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyActionPerformed
        // TODO add your handling code here:
        filterSearchResultCHK();
    }//GEN-LAST:event_btnApplyActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        search();

    }//GEN-LAST:event_btnSearchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnAC;
    private javax.swing.JToggleButton btnAll;
    private javax.swing.JButton btnApply;
    private javax.swing.JButton btnClose;
    private javax.swing.JToggleButton btnDF;
    private javax.swing.JToggleButton btnGJ;
    private javax.swing.JToggleButton btnKO;
    private javax.swing.JToggleButton btnPS;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSearch;
    private javax.swing.JToggleButton btnTZ;
    private javax.swing.JCheckBox chkCream;
    private javax.swing.JCheckBox chkHard;
    private javax.swing.JCheckBox chkNoAlk;
    private javax.swing.JCheckBox chkfruity;
    private javax.swing.JComboBox<String> comboCategory;
    private javax.swing.JComboBox<String> comboCreate;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JList<String> listContainer;
    private javax.swing.JScrollPane listPane;
    private javax.swing.JTextField searchField;
    // End of variables declaration//GEN-END:variables

// Beginn Methoden
    // select Cocktail / Getraenk
    public String selectCategory() {
        String category = comboCategory.getSelectedItem().toString();
        return category;
    }

    // Search
    public void search() {
        String search = searchField.getText();
        DefaultListModel listModel = new DefaultListModel();
        listContainer = new JList(listModel);
        for (Cocktail cocktail : cocktailsList) {
            if (selectCategory().equals("Cocktail")) {
                if (cocktail.getName().contains(search)) {
                    listModel.addElement(cocktail.getName());
                }
            } else if (selectCategory().equals("Bestandteil")) {
                for (int i = 0; i < cocktail.getZutaten().length; i++) {
                    if (cocktail.getZutaten()[i].getName().contains(search)) {
                        listModel.addElement(cocktail.getName());
                    }

                }
            }
        }

    }

    // Liste von Cocktails 
    public void listSearchResult() {
        DefaultListModel listModel = new DefaultListModel();
        listContainer = new JList(listModel);
        cocktailsList = Cocktail.getAll();
        Arrays.sort(cocktailsList);
        for (Cocktail cocktail : cocktailsList) {
            listModel.addElement(cocktail.getName());
        }

    }

    // Sortieren der Auswahlliste
    public void filterSearchResultALF(ActionEvent e) {
        DefaultListModel listModel = new DefaultListModel();
        listContainer = new JList(listModel);
        if (e.getSource().equals(btnAC)) {

            //Alle Strings in listModel die nicht mit A, B, C beginnen werden 
            //aus der Liste entfernt
            for (Cocktail cocktail : cocktailsList) {
                if (listContainer.getNextMatch("A", 0, Position.Bias.Forward) >= 0
                        || listContainer.getNextMatch("B", 0, Position.Bias.Forward) >= 0
                        || listContainer.getNextMatch("C", 0, Position.Bias.Forward) >= 0) {
                    listModel.addElement(cocktail.getName());
                }
            }

        }
        if (e.getSource().equals(btnDF)) {

            //Alle Strings in listModel die nicht mit D, E, F beginnen werden 
            //aus der Liste entfernt
            for (Cocktail cocktail : cocktailsList) {
                if (listContainer.getNextMatch("D", 0, Position.Bias.Forward) >= 0
                        || listContainer.getNextMatch("E", 0, Position.Bias.Forward) >= 0
                        || listContainer.getNextMatch("F", 0, Position.Bias.Forward) >= 0) {
                    listModel.addElement(cocktail.getName());
                }
            }

        }
        if (e.getSource().equals(btnGJ)) {

            //Alle Strings in listModel die nicht mit G, H, I, J beginnen werden 
            //aus der Liste entfernt
            for (Cocktail cocktail : cocktailsList) {
                if (listContainer.getNextMatch("G", 0, Position.Bias.Forward) >= 0
                        || listContainer.getNextMatch("H", 0, Position.Bias.Forward) >= 0
                        || listContainer.getNextMatch("I", 0, Position.Bias.Forward) >= 0
                        || listContainer.getNextMatch("J", 0, Position.Bias.Forward) >= 0) {
                    listModel.addElement(cocktail.getName());
                }
            }

        }
        if (e.getSource().equals(btnKO)) {

            //Alle Strings in listModel die nicht mit K, L, M, N, O beginnen werden 
            //aus der Liste entfernt
            for (Cocktail cocktail : cocktailsList) {
                if (listContainer.getNextMatch("K", 0, Position.Bias.Forward) >= 0
                        || listContainer.getNextMatch("L", 0, Position.Bias.Forward) >= 0
                        || listContainer.getNextMatch("M", 0, Position.Bias.Forward) >= 0
                        || listContainer.getNextMatch("N", 0, Position.Bias.Forward) >= 0
                        || listContainer.getNextMatch("O", 0, Position.Bias.Forward) >= 0) {
                    listModel.addElement(cocktail.getName());
                }
            }

        }
        if (e.getSource().equals(btnPS)) {

            //Alle Strings in listModel die nicht mit P, Q, R, S beginnen werden 
            //aus der Liste entfernt
            for (Cocktail cocktail : cocktailsList) {
                if (listContainer.getNextMatch("P", 0, Position.Bias.Forward) >= 0
                        || listContainer.getNextMatch("Q", 0, Position.Bias.Forward) >= 0
                        || listContainer.getNextMatch("R", 0, Position.Bias.Forward) >= 0
                        || listContainer.getNextMatch("S", 0, Position.Bias.Forward) >= 0) {
                    listModel.addElement(cocktail.getName());
                }
            }

        }
        if (e.getSource().equals(btnTZ)) {

            //Alle Strings in listModel die nicht mit T, U, V, W, X, Y, Z beginnen werden 
            //aus der Liste entfernt
            for (Cocktail cocktail : cocktailsList) {
                if (listContainer.getNextMatch("T", 0, Position.Bias.Forward) >= 0
                        || listContainer.getNextMatch("U", 0, Position.Bias.Forward) >= 0
                        || listContainer.getNextMatch("V", 0, Position.Bias.Forward) >= 0
                        || listContainer.getNextMatch("W", 0, Position.Bias.Forward) >= 0
                        || listContainer.getNextMatch("X", 0, Position.Bias.Forward) >= 0
                        || listContainer.getNextMatch("Y", 0, Position.Bias.Forward) >= 0
                        || listContainer.getNextMatch("Z", 0, Position.Bias.Forward) >= 0) {
                    listModel.addElement(cocktail.getName());
                }
            }

        }

    }

    // Anwenden der Filtereinstellungen
    public void filterSearchResultCHK() {
        if (chkCream.isSelected()) {
            filteringCream();
        }
        if (chkNoAlk.isSelected()) {
            filteringAlk();
        }
        if (chkHard.isSelected()) {
            filteringSoftCocktails();
        }
        if (chkfruity.isSelected()) {
            filteringNonFruity();
        }

    }

    // Filter Akl
    public void filteringAlk() {
        DefaultListModel listModel = new DefaultListModel();
        listContainer = new JList(listModel);
        for (Cocktail cocktail : cocktailsList) {
            double perCentAlk = 0;
            for (int i = 0; i < cocktail.getZutaten().length; i++) {

                perCentAlk += cocktail.getZutaten()[i].getAlk();
            }
            if (perCentAlk == 0) {
                listModel.addElement(cocktail.getName());
            }

        }

    }

    // Filter fruity
    public void filteringNonFruity() {
        DefaultListModel listModel = new DefaultListModel();
        listContainer = new JList(listModel);
        for (Cocktail cocktail : cocktailsList) {
            Boolean fruity = false;
            for (int i = 0; i < cocktail.getZutaten().length; i++) {
                if (cocktail.getZutaten()[i].getName().toLowerCase().contains("saft")) {
                    fruity = true;
                    break;
                }

            }
            if (fruity) {
                listModel.addElement(cocktail.getName());
            }

        }

    }

    //Filter hard
    public void filteringSoftCocktails() {
        DefaultListModel listModel = new DefaultListModel();
        listContainer = new JList(listModel);
        for (Cocktail cocktail : cocktailsList) {
            double alkPur = 0;
            for (int i = 0; i < cocktail.getZutaten().length; i++) {
                if (cocktail.getZutaten()[i].getAlk() > 0) {
                    alkPur += cocktail.getMenge()[i];
                }

            }
            if (alkPur >= 6) {
                listModel.addElement(cocktail.getName());
            }

        }

    }

    // Filtering Cream
    public void filteringCream() {
        String[] bannedCream = {"sahne", "cream", "creme", "crema", "bailey's", "batida",
            "milch", "baileys", "milk"};
        DefaultListModel listModel = new DefaultListModel();
        listContainer = new JList(listModel);
        for (Cocktail cocktail : cocktailsList) {
            Boolean cream = false;
            for (int i = 0; i < cocktail.getZutaten().length; i++) {
                for (int j = 0; j < bannedCream.length; j++) {
                    if (cocktail.getZutaten()[i].getName().toLowerCase().contains(bannedCream[j])) {
                        cream = true;
                        break;
                    }
                }
                if (cream) {
                    break;
                }
            }
            if (cream) {
                listModel.addElement(cocktail.getName());
            }

        }

    }

    // zur√ºcksetzen der Filter 
    public void filterreset() {
        listSearchResult();
        chkCream.setSelected(false);
        chkHard.setSelected(false);
        chkNoAlk.setSelected(false);
        chkfruity.setSelected(false);
    }

    // schlie√üen
    public void close() {
        //setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        System.exit(0);
    }

    // Cocktail erstellen
    public void createCocktail() {
        new CocktailGUI().setVisible(true);

    }

    // Bestandteil erstellen
    public void createBestandteil() {
        new BestandteileGUI().setVisible(true);

    }

}
